

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Dec 22 19:46:19 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Version 2.40
    22                           ; Generated 17/11/2021 GMT
    23                           ; 
    24                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F628A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56     0000                     	;# 
    57     0001                     	;# 
    58     0002                     	;# 
    59     0003                     	;# 
    60     0004                     	;# 
    61     0005                     	;# 
    62     0006                     	;# 
    63     000A                     	;# 
    64     000B                     	;# 
    65     000C                     	;# 
    66     000E                     	;# 
    67     000E                     	;# 
    68     000F                     	;# 
    69     0010                     	;# 
    70     0011                     	;# 
    71     0012                     	;# 
    72     0015                     	;# 
    73     0015                     	;# 
    74     0016                     	;# 
    75     0017                     	;# 
    76     0018                     	;# 
    77     0019                     	;# 
    78     001A                     	;# 
    79     001F                     	;# 
    80     0081                     	;# 
    81     0085                     	;# 
    82     0086                     	;# 
    83     008C                     	;# 
    84     008E                     	;# 
    85     0092                     	;# 
    86     0098                     	;# 
    87     0099                     	;# 
    88     009A                     	;# 
    89     009B                     	;# 
    90     009C                     	;# 
    91     009D                     	;# 
    92     009F                     	;# 
    93     0000                     	;# 
    94     0001                     	;# 
    95     0002                     	;# 
    96     0003                     	;# 
    97     0004                     	;# 
    98     0005                     	;# 
    99     0006                     	;# 
   100     000A                     	;# 
   101     000B                     	;# 
   102     000C                     	;# 
   103     000E                     	;# 
   104     000E                     	;# 
   105     000F                     	;# 
   106     0010                     	;# 
   107     0011                     	;# 
   108     0012                     	;# 
   109     0015                     	;# 
   110     0015                     	;# 
   111     0016                     	;# 
   112     0017                     	;# 
   113     0018                     	;# 
   114     0019                     	;# 
   115     001A                     	;# 
   116     001F                     	;# 
   117     0081                     	;# 
   118     0085                     	;# 
   119     0086                     	;# 
   120     008C                     	;# 
   121     008E                     	;# 
   122     0092                     	;# 
   123     0098                     	;# 
   124     0099                     	;# 
   125     009A                     	;# 
   126     009B                     	;# 
   127     009C                     	;# 
   128     009D                     	;# 
   129     009F                     	;# 
   130     001A                     _RCREG	set	26
   131     0019                     _TXREG	set	25
   132     005E                     _PEIE	set	94
   133     005F                     _GIE	set	95
   134     0035                     _RB5	set	53
   135     0065                     _RCIF	set	101
   136     0064                     _TXIF	set	100
   137     00C6                     _RX9	set	198
   138     00C5                     _SREN	set	197
   139     00C4                     _CREN	set	196
   140     00C7                     _SPEN	set	199
   141     0086                     _TRISB	set	134
   142     0099                     _SPBRG	set	153
   143     04C5                     _TXEN	set	1221
   144     04C6                     _TX9	set	1222
   145     0465                     _RCIE	set	1125
   146     0464                     _TXIE	set	1124
   147     04C4                     _SYNC	set	1220
   148     04C0                     _TX9D	set	1216
   149     04C2                     _BRGH	set	1218
   150     0431                     _TRISB1	set	1073
   151     0432                     _TRISB2	set	1074
   152                           
   153                           	psect	strings
   154     00C8                     __pstrings:
   155     00C8                     stringtab:
   156     00C8                     __stringtab:
   157                           
   158                           ;	String table - string pointers are 1 byte each
   159     00C8  1BFF               	btfsc	btemp+1,7
   160     00C9  28D2               	ljmp	stringcode
   161     00CA  1383               	bcf	3,7
   162     00CB  187F               	btfsc	btemp+1,0
   163     00CC  1783               	bsf	3,7
   164     00CD  0800               	movf	0,w
   165     00CE  0A84               	incf	4,f
   166     00CF  1903               	skipnz
   167     00D0  0AFF               	incf	btemp+1,f
   168     00D1  0008               	return
   169     00D2                     stringcode:
   170     00D2                     stringdir:
   171     00D2  3000               	movlw	high stringdir
   172     00D3  008A               	movwf	10
   173     00D4  0804               	movf	4,w
   174     00D5  0A84               	incf	4,f
   175     00D6  0782               	addwf	2,f
   176     00D7                     __stringbase:
   177     00D7  3400               	retlw	0
   178     00D8                     __end_of__stringtab:
   179     00D8                     STR_1:
   180     00D8  3458               	retlw	88	;'X'
   181     00D9  3455               	retlw	85	;'U'
   182     00DA  3459               	retlw	89	;'Y'
   183     00DB  3420               	retlw	32	;' '
   184     00DC  344F               	retlw	79	;'O'
   185     00DD  3453               	retlw	83	;'S'
   186     00DE  3420               	retlw	32	;' '
   187     00DF  3456               	retlw	86	;'V'
   188     00E0  3420               	retlw	32	;' '
   189     00E1  3430               	retlw	48	;'0'
   190     00E2  342E               	retlw	46	;'.'
   191     00E3  3431               	retlw	49	;'1'
   192     00E4  342E               	retlw	46	;'.'
   193     00E5  3432               	retlw	50	;'2'
   194     00E6  340A               	retlw	10
   195     00E7  3400               	retlw	0
   196                           
   197                           	psect	cinit
   198     000F                     start_initialization:	
   199                           ; #config settings
   200                           
   201     000F                     __initialization:
   202                           
   203                           ; Clear objects allocated to BANK0
   204     000F  1283               	bcf	3,5	;RP0=0, select bank0
   205     0010  1303               	bcf	3,6	;RP1=0, select bank0
   206     0011  01AA               	clrf	__pbssBANK0& (0+127)
   207     0012  01AB               	clrf	(__pbssBANK0+1)& (0+127)
   208     0013  01AC               	clrf	(__pbssBANK0+2)& (0+127)
   209     0014  01AD               	clrf	(__pbssBANK0+3)& (0+127)
   210     0015  01AE               	clrf	(__pbssBANK0+4)& (0+127)
   211     0016  01AF               	clrf	(__pbssBANK0+5)& (0+127)
   212     0017  01B0               	clrf	(__pbssBANK0+6)& (0+127)
   213     0018                     end_of_initialization:	
   214                           ;End of C runtime variable initialization code
   215                           
   216     0018                     __end_of__initialization:
   217     0018  0183               	clrf	3
   218     0019  281A               	ljmp	_main	;jump to C main() function
   219                           
   220                           	psect	bssBANK0
   221     002A                     __pbssBANK0:
   222     002A                     _cmdata:
   223     002A                     	ds	7
   224                           
   225                           	psect	cstackCOMMON
   226     0070                     __pcstackCOMMON:
   227     0070                     ?_InitUART:
   228     0070                     ?_SendByteSerially:	
   229                           ; 1 bytes @ 0x0
   230                           
   231     0070                     ?_isr:	
   232                           ; 1 bytes @ 0x0
   233                           
   234     0070                     ?_main:	
   235                           ; 1 bytes @ 0x0
   236                           
   237     0070                     ?i1_SendByteSerially:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ??i1_SendByteSerially:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     i1SendByteSerially@Byte:	
   244                           ; 1 bytes @ 0x0
   245                           
   246                           
   247                           ; 1 bytes @ 0x0
   248     0070                     	ds	1
   249     0071                     ??_isr:
   250                           
   251                           ; 1 bytes @ 0x1
   252     0071                     	ds	4
   253     0075                     ??_InitUART:
   254     0075                     ??_SendByteSerially:	
   255                           ; 1 bytes @ 0x5
   256                           
   257     0075                     ?_strlen:	
   258                           ; 1 bytes @ 0x5
   259                           
   260     0075                     SendByteSerially@Byte:	
   261                           ; 2 bytes @ 0x5
   262                           
   263     0075                     strlen@s:	
   264                           ; 1 bytes @ 0x5
   265                           
   266                           
   267                           ; 2 bytes @ 0x5
   268     0075                     	ds	2
   269     0077                     ??_strlen:
   270     0077                     strlen@cp:	
   271                           ; 1 bytes @ 0x7
   272                           
   273                           
   274                           ; 2 bytes @ 0x7
   275     0077                     	ds	2
   276                           
   277                           	psect	cstackBANK0
   278     0020                     __pcstackBANK0:
   279     0020                     ?_SendString:
   280     0020                     SendString@str:	
   281                           ; 1 bytes @ 0x0
   282                           
   283                           
   284                           ; 2 bytes @ 0x0
   285     0020                     	ds	2
   286     0022                     ??_SendString:
   287                           
   288                           ; 1 bytes @ 0x2
   289     0022                     	ds	3
   290     0025                     SendString@i:
   291                           
   292                           ; 2 bytes @ 0x5
   293     0025                     	ds	2
   294     0027                     ??_main:
   295                           
   296                           ; 1 bytes @ 0x7
   297     0027                     	ds	3
   298                           
   299                           	psect	maintext
   300     001A                     __pmaintext:	
   301 ;;
   302 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   303 ;;
   304 ;; *************** function _main *****************
   305 ;; Defined at:
   306 ;;		line 100 in file "testuart.c"
   307 ;; Parameters:    Size  Location     Type
   308 ;;		None
   309 ;; Auto vars:     Size  Location     Type
   310 ;;		None
   311 ;; Return value:  Size  Location     Type
   312 ;;                  1    wreg      void 
   313 ;; Registers used:
   314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   315 ;; Tracked objects:
   316 ;;		On entry : B00/0
   317 ;;		On exit  : 0/0
   318 ;;		Unchanged: 0/0
   319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   320 ;;      Params:         0       0       0       0
   321 ;;      Locals:         0       0       0       0
   322 ;;      Temps:          0       3       0       0
   323 ;;      Totals:         0       3       0       0
   324 ;;Total ram usage:        3 bytes
   325 ;; Hardware stack levels required when called: 4
   326 ;; This function calls:
   327 ;;		_InitUART
   328 ;;		_SendByteSerially
   329 ;;		_SendString
   330 ;; This function is called by:
   331 ;;		Startup code after reset
   332 ;; This function uses a non-reentrant model
   333 ;;
   334                           
   335     001A                     _main:	
   336                           ;psect for function _main
   337                           
   338     001A                     l838:	
   339                           ;incstack = 0
   340                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   341                           
   342                           
   343                           ;testuart.c: 101:    TRISB=0;
   344     001A  1683               	bsf	3,5	;RP0=1, select bank1
   345     001B  1303               	bcf	3,6	;RP1=0, select bank1
   346     001C  0186               	clrf	6	;volatile
   347     001D                     l840:
   348                           
   349                           ;testuart.c: 102:   InitUART();
   350     001D  2108               	fcall	_InitUART
   351     001E                     l842:
   352                           
   353                           ;testuart.c: 103:   cmdata.position=0;
   354     001E  1283               	bcf	3,5	;RP0=0, select bank0
   355     001F  1303               	bcf	3,6	;RP1=0, select bank0
   356     0020  01AF               	clrf	_cmdata+5
   357     0021  01B0               	clrf	_cmdata+6
   358     0022                     l844:
   359                           
   360                           ;testuart.c: 104:    RB5=0;
   361     0022  1286               	bcf	6,5	;volatile
   362     0023                     l846:
   363                           
   364                           ;testuart.c: 105:     GIE=1;
   365     0023  178B               	bsf	11,7	;volatile
   366     0024                     l848:
   367                           
   368                           ;testuart.c: 106:   PEIE=1;
   369     0024  170B               	bsf	11,6	;volatile
   370     0025                     l850:
   371                           
   372                           ;testuart.c: 107:   SendString("XUY OS V 0.1.2\n");
   373     0025  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   374     0026  00A0               	movwf	SendString@str
   375     0027  3080               	movlw	128
   376     0028  00A1               	movwf	SendString@str+1
   377     0029  2095               	fcall	_SendString
   378     002A                     l852:
   379                           
   380                           ;testuart.c: 109:     {;testuart.c: 112:          _delay((unsigned long)((1000)*(4000000
      +                          /4000.0)));
   381     002A  3006               	movlw	6
   382     002B  1283               	bcf	3,5	;RP0=0, select bank0
   383     002C  1303               	bcf	3,6	;RP1=0, select bank0
   384     002D  00A9               	movwf	??_main+2
   385     002E  3013               	movlw	19
   386     002F  00A8               	movwf	??_main+1
   387     0030  30AD               	movlw	173
   388     0031  00A7               	movwf	??_main
   389     0032                     u177:
   390     0032  0BA7               	decfsz	??_main,f
   391     0033  2832               	goto	u177
   392     0034  0BA8               	decfsz	??_main+1,f
   393     0035  2832               	goto	u177
   394     0036  0BA9               	decfsz	??_main+2,f
   395     0037  2832               	goto	u177
   396     0038  0000               	nop
   397     0039                     l854:
   398                           
   399                           ;testuart.c: 113:          if (cmdata.position==5)
   400     0039  3005               	movlw	5
   401     003A  1283               	bcf	3,5	;RP0=0, select bank0
   402     003B  1303               	bcf	3,6	;RP1=0, select bank0
   403     003C  062F               	xorwf	_cmdata+5,w
   404     003D  0430               	iorwf	_cmdata+6,w
   405     003E  1D03               	btfss	3,2
   406     003F  2841               	goto	u161
   407     0040  2842               	goto	u160
   408     0041                     u161:
   409     0041  2844               	goto	l858
   410     0042                     u160:
   411     0042                     l856:
   412                           
   413                           ;testuart.c: 114:             SendByteSerially('F');
   414     0042  3046               	movlw	70
   415     0043  2123               	fcall	_SendByteSerially
   416     0044                     l858:
   417                           
   418                           ;testuart.c: 118:        SendString(cmdata.cmd);
   419     0044  302A               	movlw	(low (_cmdata| 0))& (0+255)
   420     0045  1283               	bcf	3,5	;RP0=0, select bank0
   421     0046  1303               	bcf	3,6	;RP1=0, select bank0
   422     0047  00A0               	movwf	SendString@str
   423     0048  3000               	movlw	0
   424     0049  00A1               	movwf	SendString@str+1
   425     004A  2095               	fcall	_SendString
   426     004B                     l860:
   427                           
   428                           ;testuart.c: 119:         SendByteSerially('\n');
   429     004B  300A               	movlw	10
   430     004C  2123               	fcall	_SendByteSerially
   431     004D                     l862:
   432                           
   433                           ;testuart.c: 121:      _delay((unsigned long)((1000)*(4000000/4000.0)));
   434     004D  3006               	movlw	6
   435     004E  1283               	bcf	3,5	;RP0=0, select bank0
   436     004F  1303               	bcf	3,6	;RP1=0, select bank0
   437     0050  00A9               	movwf	??_main+2
   438     0051  3013               	movlw	19
   439     0052  00A8               	movwf	??_main+1
   440     0053  30AD               	movlw	173
   441     0054  00A7               	movwf	??_main
   442     0055                     u187:
   443     0055  0BA7               	decfsz	??_main,f
   444     0056  2855               	goto	u187
   445     0057  0BA8               	decfsz	??_main+1,f
   446     0058  2855               	goto	u187
   447     0059  0BA9               	decfsz	??_main+2,f
   448     005A  2855               	goto	u187
   449     005B  0000               	nop
   450     005C  282A               	goto	l852
   451     005D  280E               	ljmp	start
   452     005E                     __end_of_main:
   453                           
   454                           	psect	text1
   455     0095                     __ptext1:	
   456 ;; *************** function _SendString *****************
   457 ;; Defined at:
   458 ;;		line 60 in file "testuart.c"
   459 ;; Parameters:    Size  Location     Type
   460 ;;  str             2    0[BANK0 ] PTR unsigned char 
   461 ;;		 -> STR_1(16), cmdata(7), 
   462 ;; Auto vars:     Size  Location     Type
   463 ;;  i               2    5[BANK0 ] int 
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      void 
   466 ;; Registers used:
   467 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   473 ;;      Params:         0       2       0       0
   474 ;;      Locals:         0       2       0       0
   475 ;;      Temps:          0       3       0       0
   476 ;;      Totals:         0       7       0       0
   477 ;;Total ram usage:        7 bytes
   478 ;; Hardware stack levels used: 1
   479 ;; Hardware stack levels required when called: 3
   480 ;; This function calls:
   481 ;;		_SendByteSerially
   482 ;;		_strlen
   483 ;; This function is called by:
   484 ;;		_main
   485 ;; This function uses a non-reentrant model
   486 ;;
   487                           
   488     0095                     _SendString:	
   489                           ;psect for function _SendString
   490                           
   491     0095                     l810:	
   492                           ;incstack = 0
   493                           ; Regs used in _SendString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   494                           
   495                           
   496                           ;testuart.c: 60: void SendString(char * str);testuart.c: 61: {;testuart.c: 62:     for (
      +                          int i=0;i<=strlen(str);i++)
   497     0095  1283               	bcf	3,5	;RP0=0, select bank0
   498     0096  1303               	bcf	3,6	;RP1=0, select bank0
   499     0097  01A5               	clrf	SendString@i
   500     0098  01A6               	clrf	SendString@i+1
   501     0099  28B6               	goto	l816
   502     009A                     l812:
   503                           
   504                           ;testuart.c: 63:             SendByteSerially(str[i]);
   505     009A  0825               	movf	SendString@i,w
   506     009B  0720               	addwf	SendString@str,w
   507     009C  00A3               	movwf	??_SendString+1
   508     009D  0821               	movf	SendString@str+1,w
   509     009E  00A2               	movwf	??_SendString
   510     009F  1803               	skipnc
   511     00A0  0AA2               	incf	??_SendString,f
   512     00A1  1FA5               	btfss	SendString@i,7
   513     00A2  28A4               	goto	u110
   514     00A3  03A2               	decf	??_SendString,f
   515     00A4                     u110:
   516     00A4  1283               	bcf	3,5	;RP0=0, select bank0
   517     00A5  1303               	bcf	3,6	;RP1=0, select bank0
   518     00A6  0822               	movf	??_SendString,w
   519     00A7  00A4               	movwf	??_SendString+2
   520     00A8  0824               	movf	??_SendString+2,w
   521     00A9  00FF               	movwf	btemp+1
   522     00AA  0823               	movf	??_SendString+1,w
   523     00AB  0084               	movwf	4
   524     00AC  20C8               	fcall	stringtab
   525     00AD  2123               	fcall	_SendByteSerially
   526     00AE                     l814:
   527     00AE  3001               	movlw	1
   528     00AF  1283               	bcf	3,5	;RP0=0, select bank0
   529     00B0  1303               	bcf	3,6	;RP1=0, select bank0
   530     00B1  07A5               	addwf	SendString@i,f
   531     00B2  1803               	skipnc
   532     00B3  0AA6               	incf	SendString@i+1,f
   533     00B4  3000               	movlw	0
   534     00B5  07A6               	addwf	SendString@i+1,f
   535     00B6                     l816:
   536     00B6  0820               	movf	SendString@str,w
   537     00B7  00F5               	movwf	strlen@s
   538     00B8  0821               	movf	SendString@str+1,w
   539     00B9  00F6               	movwf	strlen@s+1
   540     00BA  20E8               	fcall	_strlen
   541     00BB  1283               	bcf	3,5	;RP0=0, select bank0
   542     00BC  1303               	bcf	3,6	;RP1=0, select bank0
   543     00BD  0826               	movf	SendString@i+1,w
   544     00BE  0276               	subwf	?_strlen+1,w
   545     00BF  1D03               	skipz
   546     00C0  28C3               	goto	u125
   547     00C1  0825               	movf	SendString@i,w
   548     00C2  0275               	subwf	?_strlen,w
   549     00C3                     u125:
   550     00C3  1803               	skipnc
   551     00C4  28C6               	goto	u121
   552     00C5  28C7               	goto	u120
   553     00C6                     u121:
   554     00C6  289A               	goto	l812
   555     00C7                     u120:
   556     00C7                     l63:
   557     00C7  0008               	return
   558     00C8                     __end_of_SendString:
   559                           
   560                           	psect	text2
   561     00E8                     __ptext2:	
   562 ;; *************** function _strlen *****************
   563 ;; Defined at:
   564 ;;		line 4 in file "/opt/microchip/xc8/v2.40/pic/sources/c90/common/strlen.c"
   565 ;; Parameters:    Size  Location     Type
   566 ;;  s               2    5[COMMON] PTR const unsigned char 
   567 ;;		 -> STR_1(16), cmdata(7), 
   568 ;; Auto vars:     Size  Location     Type
   569 ;;  cp              2    7[COMMON] PTR const unsigned char 
   570 ;;		 -> STR_1(16), cmdata(7), 
   571 ;; Return value:  Size  Location     Type
   572 ;;                  2    5[COMMON] unsigned int 
   573 ;; Registers used:
   574 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   575 ;; Tracked objects:
   576 ;;		On entry : 0/0
   577 ;;		On exit  : 0/0
   578 ;;		Unchanged: 0/0
   579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   580 ;;      Params:         2       0       0       0
   581 ;;      Locals:         2       0       0       0
   582 ;;      Temps:          0       0       0       0
   583 ;;      Totals:         4       0       0       0
   584 ;;Total ram usage:        4 bytes
   585 ;; Hardware stack levels used: 1
   586 ;; Hardware stack levels required when called: 2
   587 ;; This function calls:
   588 ;;		Nothing
   589 ;; This function is called by:
   590 ;;		_SendString
   591 ;; This function uses a non-reentrant model
   592 ;;
   593                           
   594     00E8                     _strlen:	
   595                           ;psect for function _strlen
   596                           
   597     00E8                     l776:	
   598                           ;incstack = 0
   599                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   600                           
   601     00E8  0875               	movf	strlen@s,w
   602     00E9  00F7               	movwf	strlen@cp
   603     00EA  0876               	movf	strlen@s+1,w
   604     00EB  00F8               	movwf	strlen@cp+1
   605     00EC  28F3               	goto	l780
   606     00ED                     l778:
   607     00ED  3001               	movlw	1
   608     00EE  07F7               	addwf	strlen@cp,f
   609     00EF  1803               	skipnc
   610     00F0  0AF8               	incf	strlen@cp+1,f
   611     00F1  3000               	movlw	0
   612     00F2  07F8               	addwf	strlen@cp+1,f
   613     00F3                     l780:
   614     00F3  0878               	movf	strlen@cp+1,w
   615     00F4  1283               	bcf	3,5	;RP0=0, select bank0
   616     00F5  1303               	bcf	3,6	;RP1=0, select bank0
   617     00F6  00FF               	movwf	btemp+1
   618     00F7  0877               	movf	strlen@cp,w
   619     00F8  0084               	movwf	4
   620     00F9  20C8               	fcall	stringtab
   621     00FA  3A00               	xorlw	0
   622     00FB  1D03               	skipz
   623     00FC  28FE               	goto	u101
   624     00FD  28FF               	goto	u100
   625     00FE                     u101:
   626     00FE  28ED               	goto	l778
   627     00FF                     u100:
   628     00FF                     l782:
   629     00FF  0875               	movf	strlen@s,w
   630     0100  0277               	subwf	strlen@cp,w
   631     0101  00F5               	movwf	?_strlen
   632     0102  0876               	movf	strlen@s+1,w
   633     0103  1C03               	skipc
   634     0104  0A76               	incf	strlen@s+1,w
   635     0105  0278               	subwf	strlen@cp+1,w
   636     0106  00F6               	movwf	?_strlen+1
   637     0107                     l622:
   638     0107  0008               	return
   639     0108                     __end_of_strlen:
   640                           
   641                           	psect	text3
   642     0123                     __ptext3:	
   643 ;; *************** function _SendByteSerially *****************
   644 ;; Defined at:
   645 ;;		line 50 in file "testuart.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;  Byte            1    wreg     unsigned char 
   648 ;; Auto vars:     Size  Location     Type
   649 ;;  Byte            1    5[COMMON] unsigned char 
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   659 ;;      Params:         0       0       0       0
   660 ;;      Locals:         1       0       0       0
   661 ;;      Temps:          0       0       0       0
   662 ;;      Totals:         1       0       0       0
   663 ;;Total ram usage:        1 bytes
   664 ;; Hardware stack levels used: 1
   665 ;; Hardware stack levels required when called: 2
   666 ;; This function calls:
   667 ;;		Nothing
   668 ;; This function is called by:
   669 ;;		_SendString
   670 ;;		_main
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674     0123                     _SendByteSerially:	
   675                           ;psect for function _SendByteSerially
   676                           
   677                           
   678                           ;incstack = 0
   679                           ; Regs used in _SendByteSerially: [wreg]
   680                           ;SendByteSerially@Byte stored from wreg
   681     0123  00F5               	movwf	SendByteSerially@Byte
   682     0124                     l772:
   683     0124                     l54:	
   684                           ;testuart.c: 50: void SendByteSerially(unsigned char Byte);testuart.c: 51: {;testuart.c:
      +                           52:     while (!TXIF);
   685                           
   686     0124  1283               	bcf	3,5	;RP0=0, select bank0
   687     0125  1303               	bcf	3,6	;RP1=0, select bank0
   688     0126  1E0C               	btfss	12,4	;volatile
   689     0127  2929               	goto	u91
   690     0128  292A               	goto	u90
   691     0129                     u91:
   692     0129  2924               	goto	l54
   693     012A                     u90:
   694     012A                     l774:
   695                           
   696                           ;testuart.c: 53:     TXREG=Byte;
   697     012A  0875               	movf	SendByteSerially@Byte,w
   698     012B  0099               	movwf	25	;volatile
   699     012C                     l57:
   700     012C  0008               	return
   701     012D                     __end_of_SendByteSerially:
   702                           
   703                           	psect	text4
   704     0108                     __ptext4:	
   705 ;; *************** function _InitUART *****************
   706 ;; Defined at:
   707 ;;		line 25 in file "testuart.c"
   708 ;; Parameters:    Size  Location     Type
   709 ;;		None
   710 ;; Auto vars:     Size  Location     Type
   711 ;;		None
   712 ;; Return value:  Size  Location     Type
   713 ;;                  1    wreg      void 
   714 ;; Registers used:
   715 ;;		wreg
   716 ;; Tracked objects:
   717 ;;		On entry : 0/0
   718 ;;		On exit  : 0/0
   719 ;;		Unchanged: 0/0
   720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   721 ;;      Params:         0       0       0       0
   722 ;;      Locals:         0       0       0       0
   723 ;;      Temps:          0       0       0       0
   724 ;;      Totals:         0       0       0       0
   725 ;;Total ram usage:        0 bytes
   726 ;; Hardware stack levels used: 1
   727 ;; Hardware stack levels required when called: 2
   728 ;; This function calls:
   729 ;;		Nothing
   730 ;; This function is called by:
   731 ;;		_main
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735     0108                     _InitUART:	
   736                           ;psect for function _InitUART
   737                           
   738     0108                     l786:	
   739                           ;incstack = 0
   740                           ; Regs used in _InitUART: [wreg]
   741                           
   742                           
   743                           ;testuart.c: 27:     TRISB2=0;
   744     0108  1683               	bsf	3,5	;RP0=1, select bank1
   745     0109  1303               	bcf	3,6	;RP1=0, select bank1
   746     010A  1106               	bcf	6,2	;volatile
   747                           
   748                           ;testuart.c: 28:     TRISB1=1;
   749     010B  1486               	bsf	6,1	;volatile
   750                           
   751                           ;testuart.c: 30:     BRGH=1;
   752     010C  1518               	bsf	24,2	;volatile
   753                           
   754                           ;testuart.c: 31:     TX9D=0;
   755     010D  1018               	bcf	24,0	;volatile
   756     010E                     l788:
   757                           
   758                           ;testuart.c: 32:     SPBRG=((4000000/16)/9600);
   759     010E  301A               	movlw	26
   760     010F  0099               	movwf	25	;volatile
   761     0110                     l790:
   762                           
   763                           ;testuart.c: 33:     SYNC=0;
   764     0110  1218               	bcf	24,4	;volatile
   765     0111                     l792:
   766                           
   767                           ;testuart.c: 34:     SPEN=1;
   768     0111  1283               	bcf	3,5	;RP0=0, select bank0
   769     0112  1303               	bcf	3,6	;RP1=0, select bank0
   770     0113  1798               	bsf	24,7	;volatile
   771     0114                     l794:
   772                           
   773                           ;testuart.c: 35:     CREN=1;
   774     0114  1618               	bsf	24,4	;volatile
   775     0115                     l796:
   776                           
   777                           ;testuart.c: 36:     SREN=0;
   778     0115  1298               	bcf	24,5	;volatile
   779     0116                     l798:
   780                           
   781                           ;testuart.c: 37:     TXIE=0;
   782     0116  1683               	bsf	3,5	;RP0=1, select bank1
   783     0117  1303               	bcf	3,6	;RP1=0, select bank1
   784     0118  120C               	bcf	12,4	;volatile
   785     0119                     l800:
   786                           
   787                           ;testuart.c: 38:     RCIE=1;
   788     0119  168C               	bsf	12,5	;volatile
   789     011A                     l802:
   790                           
   791                           ;testuart.c: 39:     TX9=0;
   792     011A  1318               	bcf	24,6	;volatile
   793     011B                     l804:
   794                           
   795                           ;testuart.c: 40:     RX9=0;
   796     011B  1283               	bcf	3,5	;RP0=0, select bank0
   797     011C  1303               	bcf	3,6	;RP1=0, select bank0
   798     011D  1318               	bcf	24,6	;volatile
   799     011E                     l806:
   800                           
   801                           ;testuart.c: 41:     TXEN=0;
   802     011E  1683               	bsf	3,5	;RP0=1, select bank1
   803     011F  1303               	bcf	3,6	;RP1=0, select bank1
   804     0120  1298               	bcf	24,5	;volatile
   805     0121                     l808:
   806                           
   807                           ;testuart.c: 43:     TXEN=1;
   808     0121  1698               	bsf	24,5	;volatile
   809     0122                     l51:
   810     0122  0008               	return
   811     0123                     __end_of_InitUART:
   812                           
   813                           	psect	text5
   814     005E                     __ptext5:	
   815 ;; *************** function _isr *****************
   816 ;; Defined at:
   817 ;;		line 76 in file "testuart.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;		None
   822 ;; Return value:  Size  Location     Type
   823 ;;                  1    wreg      void 
   824 ;; Registers used:
   825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   831 ;;      Params:         0       0       0       0
   832 ;;      Locals:         0       0       0       0
   833 ;;      Temps:          4       0       0       0
   834 ;;      Totals:         4       0       0       0
   835 ;;Total ram usage:        4 bytes
   836 ;; Hardware stack levels used: 1
   837 ;; Hardware stack levels required when called: 1
   838 ;; This function calls:
   839 ;;		i1_SendByteSerially
   840 ;; This function is called by:
   841 ;;		Interrupt level 1
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845     005E                     _isr:	
   846                           ;psect for function _isr
   847                           
   848     005E                     i1l822:
   849                           
   850                           ;testuart.c: 78:   if(RCIF)
   851     005E  1283               	bcf	3,5	;RP0=0, select bank0
   852     005F  1303               	bcf	3,6	;RP1=0, select bank0
   853     0060  1E8C               	btfss	12,5	;volatile
   854     0061  2863               	goto	u14_21
   855     0062  2864               	goto	u14_20
   856     0063                     u14_21:
   857     0063  288A               	goto	i1l73
   858     0064                     u14_20:
   859     0064                     i1l824:
   860                           
   861                           ;testuart.c: 79:   {;testuart.c: 80:    RB5=1;
   862     0064  1686               	bsf	6,5	;volatile
   863     0065                     i1l826:
   864                           
   865                           ;testuart.c: 81:     if(cmdata.position>5){
   866     0065  0830               	movf	_cmdata+6,w
   867     0066  3A80               	xorlw	128
   868     0067  00FF               	movwf	btemp+1
   869     0068  3080               	movlw	128
   870     0069  027F               	subwf	btemp+1,w
   871     006A  1D03               	skipz
   872     006B  286E               	goto	u15_25
   873     006C  3006               	movlw	6
   874     006D  022F               	subwf	_cmdata+5,w
   875     006E                     u15_25:
   876     006E  1C03               	skipc
   877     006F  2871               	goto	u15_21
   878     0070  2872               	goto	u15_20
   879     0071                     u15_21:
   880     0071  2877               	goto	i1l830
   881     0072                     u15_20:
   882     0072                     i1l828:
   883                           
   884                           ;testuart.c: 82:        cmdata.position=0;}
   885     0072  1283               	bcf	3,5	;RP0=0, select bank0
   886     0073  1303               	bcf	3,6	;RP1=0, select bank0
   887     0074  01AF               	clrf	_cmdata+5
   888     0075  01B0               	clrf	_cmdata+6
   889     0076  2885               	goto	i1l834
   890     0077                     i1l830:
   891                           
   892                           ;testuart.c: 84:    cmdata.cmd[cmdata.position]=RCREG;
   893     0077  1283               	bcf	3,5	;RP0=0, select bank0
   894     0078  1303               	bcf	3,6	;RP1=0, select bank0
   895     0079  082F               	movf	_cmdata+5,w
   896     007A  3E2A               	addlw	(low (_cmdata| 0))& (0+255)
   897     007B  0084               	movwf	4
   898     007C  081A               	movf	26,w	;volatile
   899     007D  1383               	bcf	3,7	;select IRP bank0
   900     007E  0080               	movwf	0
   901     007F                     i1l832:
   902                           
   903                           ;testuart.c: 86:    cmdata.position++;
   904     007F  3001               	movlw	1
   905     0080  07AF               	addwf	_cmdata+5,f
   906     0081  1803               	skipnc
   907     0082  0AB0               	incf	_cmdata+6,f
   908     0083  3000               	movlw	0
   909     0084  07B0               	addwf	_cmdata+6,f
   910     0085                     i1l834:
   911                           
   912                           ;testuart.c: 89:   SendByteSerially(RCREG);
   913     0085  081A               	movf	26,w	;volatile
   914     0086  212D               	fcall	i1_SendByteSerially
   915     0087                     i1l836:
   916                           
   917                           ;testuart.c: 91:      RB5=0;
   918     0087  1283               	bcf	3,5	;RP0=0, select bank0
   919     0088  1303               	bcf	3,6	;RP1=0, select bank0
   920     0089  1286               	bcf	6,5	;volatile
   921     008A                     i1l73:
   922     008A  0874               	movf	??_isr+3,w
   923     008B  00FF               	movwf	btemp+1
   924     008C  0873               	movf	??_isr+2,w
   925     008D  008A               	movwf	10
   926     008E  0872               	movf	??_isr+1,w
   927     008F  0084               	movwf	4
   928     0090  0E71               	swapf	??_isr,w
   929     0091  0083               	movwf	3
   930     0092  0EFE               	swapf	btemp,f
   931     0093  0E7E               	swapf	btemp,w
   932     0094  0009               	retfie
   933     0095                     __end_of_isr:
   934                           
   935                           	psect	intentry
   936     0004                     __pintentry:	
   937                           ;incstack = 0
   938                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   939                           
   940     0004                     interrupt_function:
   941     007E                     saved_w	set	btemp
   942     0004  00FE               	movwf	btemp
   943     0005  0E03               	swapf	3,w
   944     0006  00F1               	movwf	??_isr
   945     0007  0804               	movf	4,w
   946     0008  00F2               	movwf	??_isr+1
   947     0009  080A               	movf	10,w
   948     000A  00F3               	movwf	??_isr+2
   949     000B  087F               	movf	btemp+1,w
   950     000C  00F4               	movwf	??_isr+3
   951     000D  285E               	ljmp	_isr
   952                           
   953                           	psect	text6
   954     012D                     __ptext6:	
   955 ;; *************** function i1_SendByteSerially *****************
   956 ;; Defined at:
   957 ;;		line 50 in file "testuart.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  Byte            1    wreg     unsigned char 
   960 ;; Auto vars:     Size  Location     Type
   961 ;;  Byte            1    0[COMMON] unsigned char 
   962 ;; Return value:  Size  Location     Type
   963 ;;                  1    wreg      void 
   964 ;; Registers used:
   965 ;;		wreg
   966 ;; Tracked objects:
   967 ;;		On entry : 0/0
   968 ;;		On exit  : 0/0
   969 ;;		Unchanged: 0/0
   970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   971 ;;      Params:         0       0       0       0
   972 ;;      Locals:         1       0       0       0
   973 ;;      Temps:          0       0       0       0
   974 ;;      Totals:         1       0       0       0
   975 ;;Total ram usage:        1 bytes
   976 ;; Hardware stack levels used: 1
   977 ;; This function calls:
   978 ;;		Nothing
   979 ;; This function is called by:
   980 ;;		_isr
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984     012D                     i1_SendByteSerially:	
   985                           ;psect for function i1_SendByteSerially
   986                           
   987                           
   988                           ;incstack = 0
   989                           ; Regs used in i1_SendByteSerially: [wreg]
   990                           ;i1SendByteSerially@Byte stored from wreg
   991     012D  00F0               	movwf	i1SendByteSerially@Byte
   992     012E                     i1l818:
   993     012E                     i1l54:	
   994                           ;testuart.c: 50: void SendByteSerially(unsigned char Byte);testuart.c: 51: {;testuart.c:
      +                           52:     while (!TXIF);
   995                           
   996     012E  1283               	bcf	3,5	;RP0=0, select bank0
   997     012F  1303               	bcf	3,6	;RP1=0, select bank0
   998     0130  1E0C               	btfss	12,4	;volatile
   999     0131  2933               	goto	u13_21
  1000     0132  2934               	goto	u13_20
  1001     0133                     u13_21:
  1002     0133  292E               	goto	i1l54
  1003     0134                     u13_20:
  1004     0134                     i1l820:
  1005                           
  1006                           ;testuart.c: 53:     TXREG=Byte;
  1007     0134  0870               	movf	i1SendByteSerially@Byte,w
  1008     0135  0099               	movwf	25	;volatile
  1009     0136                     i1l57:
  1010     0136  0008               	return
  1011     0137                     __end_ofi1_SendByteSerially:
  1012     007E                     btemp	set	126	;btemp
  1013     007E                     wtemp0	set	126
  1014                           
  1015                           	psect	idloc
  1016                           
  1017                           ;Config register IDLOC0 @ 0x2000
  1018                           ;	unspecified, using default values
  1019     2000                     	org	8192
  1020     2000  3FFF               	dw	16383
  1021                           
  1022                           ;Config register IDLOC1 @ 0x2001
  1023                           ;	unspecified, using default values
  1024     2001                     	org	8193
  1025     2001  3FFF               	dw	16383
  1026                           
  1027                           ;Config register IDLOC2 @ 0x2002
  1028                           ;	unspecified, using default values
  1029     2002                     	org	8194
  1030     2002  3FFF               	dw	16383
  1031                           
  1032                           ;Config register IDLOC3 @ 0x2003
  1033                           ;	unspecified, using default values
  1034     2003                     	org	8195
  1035     2003  3FFF               	dw	16383
  1036                           
  1037                           	psect	config
  1038                           
  1039                           ;Config register CONFIG @ 0x2007
  1040                           ;	Oscillator Selection bits
  1041                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1042                           ;	Watchdog Timer Enable bit
  1043                           ;	WDTE = OFF, WDT disabled
  1044                           ;	Power-up Timer Enable bit
  1045                           ;	PWRTE = OFF, PWRT disabled
  1046                           ;	RA5/MCLR/VPP Pin Function Select bit
  1047                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  1048                           ;	Brown-out Detect Enable bit
  1049                           ;	BOREN = ON, BOD enabled
  1050                           ;	Low-Voltage Programming Enable bit
  1051                           ;	LVP = ON, RB4/PGM pin has PGM function, low-voltage programming enabled
  1052                           ;	Data EE Memory Code Protection bit
  1053                           ;	CPD = OFF, Data memory code protection off
  1054                           ;	Flash Program Memory Code Protection bit
  1055                           ;	CP = OFF, Code protection off
  1056     2007                     	org	8199
  1057     2007  3FEA               	dw	16362

Data Sizes:
    Strings     16
    Constant    0
    Data        0
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9       9
    BANK0            80     10      17
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[16]), cmdata(BANK0[7]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[16]), cmdata(BANK0[7]), 

    SendString@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_1(CODE[16]), cmdata(BANK0[7]), 


Critical Paths under _main in COMMON

    _SendString->_strlen

Critical Paths under _isr in COMMON

    _isr->i1_SendByteSerially

Critical Paths under _main in BANK0

    _main->_SendString

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     452
                                              7 BANK0      3     3      0
                           _InitUART
                   _SendByteSerially
                         _SendString
 ---------------------------------------------------------------------------------
 (1) _SendString                                           7     5      2     430
                                              0 BANK0      7     5      2
                   _SendByteSerially
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              5 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _SendByteSerially                                     1     1      0      22
                                              5 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  4     4      0      22
                                              1 COMMON     4     4      0
                 i1_SendByteSerially
 ---------------------------------------------------------------------------------
 (4) i1_SendByteSerially                                   1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitUART
   _SendByteSerially
   _SendString
     _SendByteSerially
     _strlen

 _isr (ROOT)
   i1_SendByteSerially

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      A      11       3       21.2%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      1A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      1A      10        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Dec 22 19:46:19 2023

                         pc 0002                          l51 0122                          l54 0124  
                        l63 00C7                          l57 012C                          u90 012A  
                        u91 0129                          fsr 0004                         l622 0107  
                       l800 0119                         l802 011A                         l810 0095  
                       l804 011B                         l812 009A                         l806 011E  
                       l814 00AE                         l808 0121                         l816 00B6  
                       l840 001D                         l850 0025                         l842 001E  
                       l772 0124                         l780 00F3                         l860 004B  
                       l852 002A                         l844 0022                         l790 0110  
                       l774 012A                         l782 00FF                         l862 004D  
                       l854 0039                         l846 0023                         l838 001A  
                       l792 0111                         l776 00E8                         l856 0042  
                       l848 0024                         l794 0114                         l786 0108  
                       l778 00ED                         l858 0044                         l796 0115  
                       l788 010E                         l798 0116                         _GIE 005F  
                       _RB5 0035                         u100 00FF                         u101 00FE  
                       u110 00A4                         u120 00C7                         u121 00C6  
                       u125 00C3                         u160 0042                         u161 0041  
                       u177 0032                         u187 0055                         _RX9 00C6  
                       _TX9 04C6                         _isr 005E                         fsr0 0004  
                       indf 0000                        ?_isr 0070                        STR_1 00D8  
                      _BRGH 04C2                        _CREN 00C4                        _PEIE 005E  
                      _RCIE 0465                        _RCIF 0065                        i1l54 012E  
                      i1l57 0136                        i1l73 008A                        _SPEN 00C7  
                      _TX9D 04C0                        _SREN 00C5                        _TXIE 0464  
                      _TXEN 04C5                        _TXIF 0064                        _SYNC 04C4  
                      _main 001A                        btemp 007E                        start 000E  
                     ??_isr 0071                       ?_main 0070                       i1l820 0134  
                     i1l830 0077                       i1l822 005E                       i1l832 007F  
                     i1l824 0064                       i1l818 012E                       i1l834 0085  
                     i1l826 0065                       i1l836 0087                       i1l828 0072  
                     _RCREG 001A                       u13_20 0134                       u13_21 0133  
                     u14_20 0064                       u14_21 0063                       u15_20 0072  
                     u15_21 0071                       u15_25 006E                       _SPBRG 0099  
                     _TRISB 0086                       _TXREG 0019                       pclath 000A  
                     status 0003                       wtemp0 007E             __initialization 000F  
              __end_of_main 005E            __end_of_InitUART 0123               SendString@str 0020  
                    ??_main 0027          i1_SendByteSerially 012D                  _SendString 0095  
                    _TRISB1 0431                      _TRISB2 0432         ?i1_SendByteSerially 0070  
    i1SendByteSerially@Byte 0070                      _cmdata 002A                      _strlen 00E8  
      ??i1_SendByteSerially 0070    __end_of_SendByteSerially 012D                      saved_w 007E  
   __end_of__initialization 0018              __pcstackCOMMON 0070        SendByteSerially@Byte 0075  
               SendString@i 0025                  __pbssBANK0 002A                 ?_SendString 0020  
                 ?_InitUART 0070                  __pmaintext 001A                  __pintentry 0004  
                   ?_strlen 0075                  __stringtab 00C8                  ??_InitUART 0075  
                   __ptext1 0095                     __ptext2 00E8                     __ptext3 0123  
                   __ptext4 0108                     __ptext5 005E                     __ptext6 012D  
      end_of_initialization 0018                     strlen@s 0075           ?_SendByteSerially 0070  
        ??_SendByteSerially 0075              __end_of_strlen 0108         start_initialization 000F  
               __end_of_isr 0095                ??_SendString 0022                    ??_strlen 0077  
        __end_of_SendString 00C8                   ___latbits 0000               __pcstackBANK0 0020  
                 __pstrings 00C8           interrupt_function 0004                 __stringbase 00D7  
                  _InitUART 0108          __end_of__stringtab 00D8  __end_ofi1_SendByteSerially 0137  
                  intlevel1 0000                   stringcode 00D2                    strlen@cp 0077  
                  stringdir 00D2                    stringtab 00C8            _SendByteSerially 0123  
