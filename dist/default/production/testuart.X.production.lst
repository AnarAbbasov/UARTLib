

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Dec 22 18:43:46 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21     0000                     
    22                           ; Version 2.40
    23                           ; Generated 17/11/2021 GMT
    24                           ; 
    25                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F628A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0000                     	;# 
    58     0001                     	;# 
    59     0002                     	;# 
    60     0003                     	;# 
    61     0004                     	;# 
    62     0005                     	;# 
    63     0006                     	;# 
    64     000A                     	;# 
    65     000B                     	;# 
    66     000C                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001F                     	;# 
    81     0081                     	;# 
    82     0085                     	;# 
    83     0086                     	;# 
    84     008C                     	;# 
    85     008E                     	;# 
    86     0092                     	;# 
    87     0098                     	;# 
    88     0099                     	;# 
    89     009A                     	;# 
    90     009B                     	;# 
    91     009C                     	;# 
    92     009D                     	;# 
    93     009F                     	;# 
    94     0000                     	;# 
    95     0001                     	;# 
    96     0002                     	;# 
    97     0003                     	;# 
    98     0004                     	;# 
    99     0005                     	;# 
   100     0006                     	;# 
   101     000A                     	;# 
   102     000B                     	;# 
   103     000C                     	;# 
   104     000E                     	;# 
   105     000E                     	;# 
   106     000F                     	;# 
   107     0010                     	;# 
   108     0011                     	;# 
   109     0012                     	;# 
   110     0015                     	;# 
   111     0015                     	;# 
   112     0016                     	;# 
   113     0017                     	;# 
   114     0018                     	;# 
   115     0019                     	;# 
   116     001A                     	;# 
   117     001F                     	;# 
   118     0081                     	;# 
   119     0085                     	;# 
   120     0086                     	;# 
   121     008C                     	;# 
   122     008E                     	;# 
   123     0092                     	;# 
   124     0098                     	;# 
   125     0099                     	;# 
   126     009A                     	;# 
   127     009B                     	;# 
   128     009C                     	;# 
   129     009D                     	;# 
   130     009F                     	;# 
   131     001A                     _RCREG	set	26
   132     0019                     _TXREG	set	25
   133     005E                     _PEIE	set	94
   134     005F                     _GIE	set	95
   135     0035                     _RB5	set	53
   136     0065                     _RCIF	set	101
   137     0064                     _TXIF	set	100
   138     00C6                     _RX9	set	198
   139     00C5                     _SREN	set	197
   140     00C4                     _CREN	set	196
   141     00C7                     _SPEN	set	199
   142     0086                     _TRISB	set	134
   143     0099                     _SPBRG	set	153
   144     04C5                     _TXEN	set	1221
   145     04C6                     _TX9	set	1222
   146     0465                     _RCIE	set	1125
   147     0464                     _TXIE	set	1124
   148     04C4                     _SYNC	set	1220
   149     04C0                     _TX9D	set	1216
   150     04C2                     _BRGH	set	1218
   151     0431                     _TRISB1	set	1073
   152     0432                     _TRISB2	set	1074
   153                           
   154                           	psect	strings
   155     0083                     __pstrings:
   156     0083                     stringtab:
   157     0083                     __stringtab:
   158     0083                     stringcode:	
   159                           ;	String table - string pointers are 1 byte each
   160                           
   161     0083                     stringdir:
   162     0083  3000               	movlw	high stringdir
   163     0084  008A               	movwf	10
   164     0085  0804               	movf	4,w
   165     0086  0A84               	incf	4,f
   166     0087  0782               	addwf	2,f
   167     0088                     __stringbase:
   168     0088  3400               	retlw	0
   169     0089                     __end_of__stringtab:
   170     0089                     STR_2:
   171     0089  3458               	retlw	88	;'X'
   172     008A  3455               	retlw	85	;'U'
   173     008B  3459               	retlw	89	;'Y'
   174     008C  3420               	retlw	32	;' '
   175     008D  344F               	retlw	79	;'O'
   176     008E  3453               	retlw	83	;'S'
   177     008F  3420               	retlw	32	;' '
   178     0090  3456               	retlw	86	;'V'
   179     0091  3420               	retlw	32	;' '
   180     0092  3430               	retlw	48	;'0'
   181     0093  342E               	retlw	46	;'.'
   182     0094  3431               	retlw	49	;'1'
   183     0095  342E               	retlw	46	;'.'
   184     0096  3432               	retlw	50	;'2'
   185     0097  340A               	retlw	10
   186     0098  3400               	retlw	0
   187     0099                     STR_1:
   188     0099  3470               	retlw	112	;'p'
   189     009A  3461               	retlw	97	;'a'
   190     009B  346C               	retlw	108	;'l'
   191     009C  3461               	retlw	97	;'a'
   192     009D  3476               	retlw	118	;'v'
   193     009E  3469               	retlw	105	;'i'
   194     009F  346B               	retlw	107	;'k'
   195     00A0  3400               	retlw	0
   196                           
   197                           	psect	cinit
   198     000F                     start_initialization:	
   199                           ; #config settings
   200                           
   201     000F                     __initialization:
   202     000F                     end_of_initialization:	
   203                           ;End of C runtime variable initialization code
   204                           
   205     000F                     __end_of__initialization:
   206     000F  0183               	clrf	3
   207     0010  2811               	ljmp	_main	;jump to C main() function
   208                           
   209                           	psect	cstackCOMMON
   210     0070                     __pcstackCOMMON:
   211     0070                     ?_InitUART:
   212     0070                     ?_SendByteSerially:	
   213                           ; 1 bytes @ 0x0
   214                           
   215     0070                     ?_SendString:	
   216                           ; 1 bytes @ 0x0
   217                           
   218     0070                     ?_isr:	
   219                           ; 1 bytes @ 0x0
   220                           
   221     0070                     ?_main:	
   222                           ; 1 bytes @ 0x0
   223                           
   224     0070                     ?i1_SendByteSerially:	
   225                           ; 1 bytes @ 0x0
   226                           
   227     0070                     ??i1_SendByteSerially:	
   228                           ; 1 bytes @ 0x0
   229                           
   230     0070                     ?i1_SendString:	
   231                           ; 1 bytes @ 0x0
   232                           
   233     0070                     ?i1_strlen:	
   234                           ; 1 bytes @ 0x0
   235                           
   236     0070                     i1SendByteSerially@Byte:	
   237                           ; 2 bytes @ 0x0
   238                           
   239                           
   240                           ; 1 bytes @ 0x0
   241     0070                     	ds	2
   242     0072                     ??i1_strlen:
   243                           
   244                           ; 1 bytes @ 0x2
   245     0072                     	ds	1
   246     0073                     i1strlen@s:
   247                           
   248                           ; 1 bytes @ 0x3
   249     0073                     	ds	1
   250     0074                     i1strlen@cp:
   251                           
   252                           ; 1 bytes @ 0x4
   253     0074                     	ds	1
   254     0075                     ??i1_SendString:
   255     0075                     i1SendString@str:	
   256                           ; 1 bytes @ 0x5
   257                           
   258                           
   259                           ; 1 bytes @ 0x5
   260     0075                     	ds	1
   261     0076                     i1SendString@i:
   262                           
   263                           ; 2 bytes @ 0x6
   264     0076                     	ds	2
   265     0078                     ??_isr:
   266                           
   267                           ; 1 bytes @ 0x8
   268     0078                     	ds	4
   269                           
   270                           	psect	cstackBANK0
   271     0020                     __pcstackBANK0:
   272     0020                     ??_InitUART:
   273     0020                     ??_SendByteSerially:	
   274                           ; 1 bytes @ 0x0
   275                           
   276     0020                     ?_strlen:	
   277                           ; 1 bytes @ 0x0
   278                           
   279     0020                     SendByteSerially@Byte:	
   280                           ; 2 bytes @ 0x0
   281                           
   282                           
   283                           ; 1 bytes @ 0x0
   284     0020                     	ds	2
   285     0022                     ??_strlen:
   286                           
   287                           ; 1 bytes @ 0x2
   288     0022                     	ds	1
   289     0023                     strlen@s:
   290                           
   291                           ; 1 bytes @ 0x3
   292     0023                     	ds	1
   293     0024                     strlen@cp:
   294                           
   295                           ; 1 bytes @ 0x4
   296     0024                     	ds	1
   297     0025                     ??_SendString:
   298     0025                     SendString@i:	
   299                           ; 1 bytes @ 0x5
   300                           
   301                           
   302                           ; 2 bytes @ 0x5
   303     0025                     	ds	2
   304     0027                     SendString@str:
   305                           
   306                           ; 1 bytes @ 0x7
   307     0027                     	ds	1
   308     0028                     ??_main:
   309                           
   310                           ; 1 bytes @ 0x8
   311     0028                     	ds	3
   312                           
   313                           	psect	maintext
   314     0011                     __pmaintext:	
   315 ;;
   316 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   317 ;;
   318 ;; *************** function _main *****************
   319 ;; Defined at:
   320 ;;		line 91 in file "testuart.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;		None
   323 ;; Auto vars:     Size  Location     Type
   324 ;;		None
   325 ;; Return value:  Size  Location     Type
   326 ;;                  1    wreg      void 
   327 ;; Registers used:
   328 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : B00/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   334 ;;      Params:         0       0       0       0
   335 ;;      Locals:         0       0       0       0
   336 ;;      Temps:          0       3       0       0
   337 ;;      Totals:         0       3       0       0
   338 ;;Total ram usage:        3 bytes
   339 ;; Hardware stack levels required when called: 6
   340 ;; This function calls:
   341 ;;		_InitUART
   342 ;;		_SendByteSerially
   343 ;;		_SendString
   344 ;; This function is called by:
   345 ;;		Startup code after reset
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349     0011                     _main:	
   350                           ;psect for function _main
   351                           
   352     0011                     l856:	
   353                           ;incstack = 0
   354                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   355                           
   356                           
   357                           ;testuart.c: 92:    TRISB=0;
   358     0011  1683               	bsf	3,5	;RP0=1, select bank1
   359     0012  1303               	bcf	3,6	;RP1=0, select bank1
   360     0013  0186               	clrf	6	;volatile
   361     0014                     l858:
   362                           
   363                           ;testuart.c: 93:   InitUART();
   364     0014  20BD               	fcall	_InitUART
   365     0015                     l860:
   366                           
   367                           ;testuart.c: 94:    RB5=0;
   368     0015  1283               	bcf	3,5	;RP0=0, select bank0
   369     0016  1303               	bcf	3,6	;RP1=0, select bank0
   370     0017  1286               	bcf	6,5	;volatile
   371     0018                     l862:
   372                           
   373                           ;testuart.c: 95:     GIE=1;
   374     0018  178B               	bsf	11,7	;volatile
   375     0019                     l864:
   376                           
   377                           ;testuart.c: 96:   PEIE=1;
   378     0019  170B               	bsf	11,6	;volatile
   379     001A                     l866:
   380                           
   381                           ;testuart.c: 97:   SendString("XUY OS V 0.1.2\n");
   382     001A  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   383     001B  2040               	fcall	_SendString
   384     001C                     l868:
   385                           
   386                           ;testuart.c: 99:     {;testuart.c: 102:          _delay((unsigned long)((1000)*(4000000/
      +                          4000.0)));
   387     001C  3006               	movlw	6
   388     001D  1283               	bcf	3,5	;RP0=0, select bank0
   389     001E  1303               	bcf	3,6	;RP1=0, select bank0
   390     001F  00AA               	movwf	??_main+2
   391     0020  3013               	movlw	19
   392     0021  00A9               	movwf	??_main+1
   393     0022  30AD               	movlw	173
   394     0023  00A8               	movwf	??_main
   395     0024                     u177:
   396     0024  0BA8               	decfsz	??_main,f
   397     0025  2824               	goto	u177
   398     0026  0BA9               	decfsz	??_main+1,f
   399     0027  2824               	goto	u177
   400     0028  0BAA               	decfsz	??_main+2,f
   401     0029  2824               	goto	u177
   402     002A  0000               	nop
   403     002B                     l870:
   404                           
   405                           ;testuart.c: 104:     SendByteSerially('S');
   406     002B  3053               	movlw	83
   407     002C  2108               	fcall	_SendByteSerially
   408     002D                     l872:
   409                           
   410                           ;testuart.c: 106:     SendByteSerially('\n');
   411     002D  300A               	movlw	10
   412     002E  2108               	fcall	_SendByteSerially
   413     002F                     l874:
   414                           
   415                           ;testuart.c: 108:      _delay((unsigned long)((1000)*(4000000/4000.0)));
   416     002F  3006               	movlw	6
   417     0030  1283               	bcf	3,5	;RP0=0, select bank0
   418     0031  1303               	bcf	3,6	;RP1=0, select bank0
   419     0032  00AA               	movwf	??_main+2
   420     0033  3013               	movlw	19
   421     0034  00A9               	movwf	??_main+1
   422     0035  30AD               	movlw	173
   423     0036  00A8               	movwf	??_main
   424     0037                     u187:
   425     0037  0BA8               	decfsz	??_main,f
   426     0038  2837               	goto	u187
   427     0039  0BA9               	decfsz	??_main+1,f
   428     003A  2837               	goto	u187
   429     003B  0BAA               	decfsz	??_main+2,f
   430     003C  2837               	goto	u187
   431     003D  0000               	nop
   432     003E  281C               	goto	l868
   433     003F  280E               	ljmp	start
   434     0040                     __end_of_main:
   435                           
   436                           	psect	text1
   437     0040                     __ptext1:	
   438 ;; *************** function _SendString *****************
   439 ;; Defined at:
   440 ;;		line 60 in file "testuart.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;  str             1    wreg     PTR unsigned char 
   443 ;;		 -> STR_2(16), STR_1(8), 
   444 ;; Auto vars:     Size  Location     Type
   445 ;;  str             1    7[BANK0 ] PTR unsigned char 
   446 ;;		 -> STR_2(16), STR_1(8), 
   447 ;;  i               2    5[BANK0 ] int 
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      void 
   450 ;; Registers used:
   451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   452 ;; Tracked objects:
   453 ;;		On entry : 0/0
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   457 ;;      Params:         0       0       0       0
   458 ;;      Locals:         0       3       0       0
   459 ;;      Temps:          0       0       0       0
   460 ;;      Totals:         0       3       0       0
   461 ;;Total ram usage:        3 bytes
   462 ;; Hardware stack levels used: 1
   463 ;; Hardware stack levels required when called: 5
   464 ;; This function calls:
   465 ;;		_SendByteSerially
   466 ;;		_strlen
   467 ;; This function is called by:
   468 ;;		_main
   469 ;; This function uses a non-reentrant model
   470 ;;
   471                           
   472     0040                     _SendString:	
   473                           ;psect for function _SendString
   474                           
   475                           
   476                           ;incstack = 0
   477                           ; Regs used in _SendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   478                           ;SendString@str stored from wreg
   479     0040  1283               	bcf	3,5	;RP0=0, select bank0
   480     0041  1303               	bcf	3,6	;RP1=0, select bank0
   481     0042  00A7               	movwf	SendString@str
   482     0043                     l828:
   483                           
   484                           ;testuart.c: 60: void SendString(char * str);testuart.c: 61: {;testuart.c: 62:     for (
      +                          int i=0;i<strlen(str);i++)
   485     0043  01A5               	clrf	SendString@i
   486     0044  01A6               	clrf	SendString@i+1
   487     0045  2853               	goto	l834
   488     0046                     l830:
   489                           
   490                           ;testuart.c: 63:             SendByteSerially(str[i]);
   491     0046  0825               	movf	SendString@i,w
   492     0047  0727               	addwf	SendString@str,w
   493     0048  0084               	movwf	4
   494     0049  2083               	fcall	stringdir
   495     004A  2108               	fcall	_SendByteSerially
   496     004B                     l832:
   497     004B  3001               	movlw	1
   498     004C  1283               	bcf	3,5	;RP0=0, select bank0
   499     004D  1303               	bcf	3,6	;RP1=0, select bank0
   500     004E  07A5               	addwf	SendString@i,f
   501     004F  1803               	skipnc
   502     0050  0AA6               	incf	SendString@i+1,f
   503     0051  3000               	movlw	0
   504     0052  07A6               	addwf	SendString@i+1,f
   505     0053                     l834:
   506     0053  0827               	movf	SendString@str,w
   507     0054  20D8               	fcall	_strlen
   508     0055  1283               	bcf	3,5	;RP0=0, select bank0
   509     0056  1303               	bcf	3,6	;RP1=0, select bank0
   510     0057  0821               	movf	?_strlen+1,w
   511     0058  0226               	subwf	SendString@i+1,w
   512     0059  1D03               	skipz
   513     005A  285D               	goto	u135
   514     005B  0820               	movf	?_strlen,w
   515     005C  0225               	subwf	SendString@i,w
   516     005D                     u135:
   517     005D  1C03               	skipc
   518     005E  2860               	goto	u131
   519     005F  2861               	goto	u130
   520     0060                     u131:
   521     0060  2846               	goto	l830
   522     0061                     u130:
   523     0061                     l63:
   524     0061  0008               	return
   525     0062                     __end_of_SendString:
   526                           
   527                           	psect	text2
   528     00D8                     __ptext2:	
   529 ;; *************** function _strlen *****************
   530 ;; Defined at:
   531 ;;		line 4 in file "/opt/microchip/xc8/v2.40/pic/sources/c90/common/strlen.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;  s               1    wreg     PTR const unsigned char 
   534 ;;		 -> STR_2(16), STR_1(8), 
   535 ;; Auto vars:     Size  Location     Type
   536 ;;  s               1    3[BANK0 ] PTR const unsigned char 
   537 ;;		 -> STR_2(16), STR_1(8), 
   538 ;;  cp              1    4[BANK0 ] PTR const unsigned char 
   539 ;;		 -> STR_2(16), STR_1(8), 
   540 ;; Return value:  Size  Location     Type
   541 ;;                  2    0[BANK0 ] unsigned int 
   542 ;; Registers used:
   543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   544 ;; Tracked objects:
   545 ;;		On entry : 0/0
   546 ;;		On exit  : 0/0
   547 ;;		Unchanged: 0/0
   548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   549 ;;      Params:         0       2       0       0
   550 ;;      Locals:         0       2       0       0
   551 ;;      Temps:          0       1       0       0
   552 ;;      Totals:         0       5       0       0
   553 ;;Total ram usage:        5 bytes
   554 ;; Hardware stack levels used: 1
   555 ;; Hardware stack levels required when called: 4
   556 ;; This function calls:
   557 ;;		Nothing
   558 ;; This function is called by:
   559 ;;		_SendString
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563     00D8                     _strlen:	
   564                           ;psect for function _strlen
   565                           
   566                           
   567                           ;incstack = 0
   568                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
   569                           ;strlen@s stored from wreg
   570     00D8  1283               	bcf	3,5	;RP0=0, select bank0
   571     00D9  1303               	bcf	3,6	;RP1=0, select bank0
   572     00DA  00A3               	movwf	strlen@s
   573     00DB                     l780:
   574     00DB  0823               	movf	strlen@s,w
   575     00DC  00A4               	movwf	strlen@cp
   576     00DD  28E2               	goto	l784
   577     00DE                     l782:
   578     00DE  3001               	movlw	1
   579     00DF  00A2               	movwf	??_strlen
   580     00E0  0822               	movf	??_strlen,w
   581     00E1  07A4               	addwf	strlen@cp,f
   582     00E2                     l784:
   583     00E2  0824               	movf	strlen@cp,w
   584     00E3  0084               	movwf	4
   585     00E4  2083               	fcall	stringdir
   586     00E5  3A00               	xorlw	0
   587     00E6  1D03               	skipz
   588     00E7  28E9               	goto	u101
   589     00E8  28EA               	goto	u100
   590     00E9                     u101:
   591     00E9  28DE               	goto	l782
   592     00EA                     u100:
   593     00EA                     l786:
   594     00EA  0823               	movf	strlen@s,w
   595     00EB  0224               	subwf	strlen@cp,w
   596     00EC  00A0               	movwf	?_strlen
   597     00ED  01A1               	clrf	?_strlen+1
   598     00EE  1BA0               	btfsc	?_strlen,7
   599     00EF  03A1               	decf	?_strlen+1,f
   600     00F0                     l618:
   601     00F0  0008               	return
   602     00F1                     __end_of_strlen:
   603                           
   604                           	psect	text3
   605     0108                     __ptext3:	
   606 ;; *************** function _SendByteSerially *****************
   607 ;; Defined at:
   608 ;;		line 50 in file "testuart.c"
   609 ;; Parameters:    Size  Location     Type
   610 ;;  Byte            1    wreg     unsigned char 
   611 ;; Auto vars:     Size  Location     Type
   612 ;;  Byte            1    0[BANK0 ] unsigned char 
   613 ;; Return value:  Size  Location     Type
   614 ;;                  1    wreg      void 
   615 ;; Registers used:
   616 ;;		wreg
   617 ;; Tracked objects:
   618 ;;		On entry : 0/0
   619 ;;		On exit  : 0/0
   620 ;;		Unchanged: 0/0
   621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   622 ;;      Params:         0       0       0       0
   623 ;;      Locals:         0       1       0       0
   624 ;;      Temps:          0       0       0       0
   625 ;;      Totals:         0       1       0       0
   626 ;;Total ram usage:        1 bytes
   627 ;; Hardware stack levels used: 1
   628 ;; Hardware stack levels required when called: 4
   629 ;; This function calls:
   630 ;;		Nothing
   631 ;; This function is called by:
   632 ;;		_SendString
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637     0108                     _SendByteSerially:	
   638                           ;psect for function _SendByteSerially
   639                           
   640                           
   641                           ;incstack = 0
   642                           ; Regs used in _SendByteSerially: [wreg]
   643                           ;SendByteSerially@Byte stored from wreg
   644     0108  1283               	bcf	3,5	;RP0=0, select bank0
   645     0109  1303               	bcf	3,6	;RP1=0, select bank0
   646     010A  00A0               	movwf	SendByteSerially@Byte
   647     010B                     l776:
   648     010B                     l54:	
   649                           ;testuart.c: 50: void SendByteSerially(unsigned char Byte);testuart.c: 51: {;testuart.c:
      +                           52:     while (!TXIF);
   650                           
   651     010B  1E0C               	btfss	12,4	;volatile
   652     010C  290E               	goto	u91
   653     010D  290F               	goto	u90
   654     010E                     u91:
   655     010E  290B               	goto	l54
   656     010F                     u90:
   657     010F                     l778:
   658                           
   659                           ;testuart.c: 53:     TXREG=Byte;
   660     010F  0820               	movf	SendByteSerially@Byte,w
   661     0110  0099               	movwf	25	;volatile
   662     0111                     l57:
   663     0111  0008               	return
   664     0112                     __end_of_SendByteSerially:
   665                           
   666                           	psect	text4
   667     00BD                     __ptext4:	
   668 ;; *************** function _InitUART *****************
   669 ;; Defined at:
   670 ;;		line 25 in file "testuart.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;		None
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   684 ;;      Params:         0       0       0       0
   685 ;;      Locals:         0       0       0       0
   686 ;;      Temps:          0       0       0       0
   687 ;;      Totals:         0       0       0       0
   688 ;;Total ram usage:        0 bytes
   689 ;; Hardware stack levels used: 1
   690 ;; Hardware stack levels required when called: 4
   691 ;; This function calls:
   692 ;;		Nothing
   693 ;; This function is called by:
   694 ;;		_main
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698     00BD                     _InitUART:	
   699                           ;psect for function _InitUART
   700                           
   701     00BD                     l804:	
   702                           ;incstack = 0
   703                           ; Regs used in _InitUART: [wreg]
   704                           
   705                           
   706                           ;testuart.c: 27:     TRISB2=0;
   707     00BD  1683               	bsf	3,5	;RP0=1, select bank1
   708     00BE  1303               	bcf	3,6	;RP1=0, select bank1
   709     00BF  1106               	bcf	6,2	;volatile
   710                           
   711                           ;testuart.c: 28:     TRISB1=1;
   712     00C0  1486               	bsf	6,1	;volatile
   713                           
   714                           ;testuart.c: 30:     BRGH=1;
   715     00C1  1518               	bsf	24,2	;volatile
   716                           
   717                           ;testuart.c: 31:     TX9D=0;
   718     00C2  1018               	bcf	24,0	;volatile
   719     00C3                     l806:
   720                           
   721                           ;testuart.c: 32:     SPBRG=((4000000/16)/9600);
   722     00C3  301A               	movlw	26
   723     00C4  0099               	movwf	25	;volatile
   724     00C5                     l808:
   725                           
   726                           ;testuart.c: 33:     SYNC=0;
   727     00C5  1218               	bcf	24,4	;volatile
   728     00C6                     l810:
   729                           
   730                           ;testuart.c: 34:     SPEN=1;
   731     00C6  1283               	bcf	3,5	;RP0=0, select bank0
   732     00C7  1303               	bcf	3,6	;RP1=0, select bank0
   733     00C8  1798               	bsf	24,7	;volatile
   734     00C9                     l812:
   735                           
   736                           ;testuart.c: 35:     CREN=1;
   737     00C9  1618               	bsf	24,4	;volatile
   738     00CA                     l814:
   739                           
   740                           ;testuart.c: 36:     SREN=0;
   741     00CA  1298               	bcf	24,5	;volatile
   742     00CB                     l816:
   743                           
   744                           ;testuart.c: 37:     TXIE=0;
   745     00CB  1683               	bsf	3,5	;RP0=1, select bank1
   746     00CC  1303               	bcf	3,6	;RP1=0, select bank1
   747     00CD  120C               	bcf	12,4	;volatile
   748     00CE                     l818:
   749                           
   750                           ;testuart.c: 38:     RCIE=1;
   751     00CE  168C               	bsf	12,5	;volatile
   752     00CF                     l820:
   753                           
   754                           ;testuart.c: 39:     TX9=0;
   755     00CF  1318               	bcf	24,6	;volatile
   756     00D0                     l822:
   757                           
   758                           ;testuart.c: 40:     RX9=0;
   759     00D0  1283               	bcf	3,5	;RP0=0, select bank0
   760     00D1  1303               	bcf	3,6	;RP1=0, select bank0
   761     00D2  1318               	bcf	24,6	;volatile
   762     00D3                     l824:
   763                           
   764                           ;testuart.c: 41:     TXEN=0;
   765     00D3  1683               	bsf	3,5	;RP0=1, select bank1
   766     00D4  1303               	bcf	3,6	;RP1=0, select bank1
   767     00D5  1298               	bcf	24,5	;volatile
   768     00D6                     l826:
   769                           
   770                           ;testuart.c: 43:     TXEN=1;
   771     00D6  1698               	bsf	24,5	;volatile
   772     00D7                     l51:
   773     00D7  0008               	return
   774     00D8                     __end_of_InitUART:
   775                           
   776                           	psect	text5
   777     0062                     __ptext5:	
   778 ;; *************** function _isr *****************
   779 ;; Defined at:
   780 ;;		line 72 in file "testuart.c"
   781 ;; Parameters:    Size  Location     Type
   782 ;;		None
   783 ;; Auto vars:     Size  Location     Type
   784 ;;		None
   785 ;; Return value:  Size  Location     Type
   786 ;;                  1    wreg      void 
   787 ;; Registers used:
   788 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   789 ;; Tracked objects:
   790 ;;		On entry : 0/0
   791 ;;		On exit  : 0/0
   792 ;;		Unchanged: 0/0
   793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   794 ;;      Params:         0       0       0       0
   795 ;;      Locals:         0       0       0       0
   796 ;;      Temps:          4       0       0       0
   797 ;;      Totals:         4       0       0       0
   798 ;;Total ram usage:        4 bytes
   799 ;; Hardware stack levels used: 1
   800 ;; Hardware stack levels required when called: 3
   801 ;; This function calls:
   802 ;;		i1_SendByteSerially
   803 ;;		i1_SendString
   804 ;; This function is called by:
   805 ;;		Interrupt level 1
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809     0062                     _isr:	
   810                           ;psect for function _isr
   811                           
   812     0062                     i1l844:
   813                           
   814                           ;testuart.c: 74:   if(RCIF)
   815     0062  1283               	bcf	3,5	;RP0=0, select bank0
   816     0063  1303               	bcf	3,6	;RP1=0, select bank0
   817     0064  1E8C               	btfss	12,5	;volatile
   818     0065  2867               	goto	u15_21
   819     0066  2868               	goto	u15_20
   820     0067                     u15_21:
   821     0067  2878               	goto	i1l70
   822     0068                     u15_20:
   823     0068                     i1l846:
   824                           
   825                           ;testuart.c: 75:   {;testuart.c: 76:    RB5=1;
   826     0068  1686               	bsf	6,5	;volatile
   827     0069                     i1l848:
   828                           
   829                           ;testuart.c: 78:    if (RCREG=='A')
   830     0069  3041               	movlw	65
   831     006A  061A               	xorwf	26,w	;volatile
   832     006B  1D03               	btfss	3,2
   833     006C  286E               	goto	u16_21
   834     006D  286F               	goto	u16_20
   835     006E                     u16_21:
   836     006E  2871               	goto	i1l852
   837     006F                     u16_20:
   838     006F                     i1l850:
   839                           
   840                           ;testuart.c: 79:        SendString("palavik");
   841     006F  3011               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   842     0070  20A1               	fcall	i1_SendString
   843     0071                     i1l852:
   844                           
   845                           ;testuart.c: 80:   SendByteSerially(RCREG);
   846     0071  1283               	bcf	3,5	;RP0=0, select bank0
   847     0072  1303               	bcf	3,6	;RP1=0, select bank0
   848     0073  081A               	movf	26,w	;volatile
   849     0074  2112               	fcall	i1_SendByteSerially
   850     0075                     i1l854:
   851                           
   852                           ;testuart.c: 82:      RB5=0;
   853     0075  1283               	bcf	3,5	;RP0=0, select bank0
   854     0076  1303               	bcf	3,6	;RP1=0, select bank0
   855     0077  1286               	bcf	6,5	;volatile
   856     0078                     i1l70:
   857     0078  087B               	movf	??_isr+3,w
   858     0079  00FF               	movwf	btemp+1
   859     007A  087A               	movf	??_isr+2,w
   860     007B  008A               	movwf	10
   861     007C  0879               	movf	??_isr+1,w
   862     007D  0084               	movwf	4
   863     007E  0E78               	swapf	??_isr,w
   864     007F  0083               	movwf	3
   865     0080  0EFE               	swapf	btemp,f
   866     0081  0E7E               	swapf	btemp,w
   867     0082  0009               	retfie
   868     0083                     __end_of_isr:
   869                           
   870                           	psect	intentry
   871     0004                     __pintentry:	
   872                           ;incstack = 0
   873                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   874                           
   875     0004                     interrupt_function:
   876     007E                     saved_w	set	btemp
   877     0004  00FE               	movwf	btemp
   878     0005  0E03               	swapf	3,w
   879     0006  00F8               	movwf	??_isr
   880     0007  0804               	movf	4,w
   881     0008  00F9               	movwf	??_isr+1
   882     0009  080A               	movf	10,w
   883     000A  00FA               	movwf	??_isr+2
   884     000B  087F               	movf	btemp+1,w
   885     000C  00FB               	movwf	??_isr+3
   886     000D  2862               	ljmp	_isr
   887                           
   888                           	psect	text6
   889     00A1                     __ptext6:	
   890 ;; *************** function i1_SendString *****************
   891 ;; Defined at:
   892 ;;		line 60 in file "testuart.c"
   893 ;; Parameters:    Size  Location     Type
   894 ;;  str             1    wreg     PTR unsigned char 
   895 ;;		 -> STR_2(16), STR_1(8), 
   896 ;; Auto vars:     Size  Location     Type
   897 ;;  str             1    5[COMMON] PTR unsigned char 
   898 ;;		 -> STR_2(16), STR_1(8), 
   899 ;;  i               2    6[COMMON] int 
   900 ;; Return value:  Size  Location     Type
   901 ;;                  1    wreg      void 
   902 ;; Registers used:
   903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   904 ;; Tracked objects:
   905 ;;		On entry : 0/0
   906 ;;		On exit  : 0/0
   907 ;;		Unchanged: 0/0
   908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   909 ;;      Params:         0       0       0       0
   910 ;;      Locals:         3       0       0       0
   911 ;;      Temps:          0       0       0       0
   912 ;;      Totals:         3       0       0       0
   913 ;;Total ram usage:        3 bytes
   914 ;; Hardware stack levels used: 1
   915 ;; Hardware stack levels required when called: 2
   916 ;; This function calls:
   917 ;;		i1_SendByteSerially
   918 ;;		i1_strlen
   919 ;; This function is called by:
   920 ;;		_isr
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924     00A1                     i1_SendString:	
   925                           ;psect for function i1_SendString
   926                           
   927                           
   928                           ;incstack = 0
   929                           ; Regs used in i1_SendString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   930                           ;i1SendString@str stored from wreg
   931     00A1  00F5               	movwf	i1SendString@str
   932     00A2                     i1l836:
   933                           
   934                           ;testuart.c: 60: void SendString(char * str);testuart.c: 61: {;testuart.c: 62:     for (
      +                          int i=0;i<strlen(str);i++)
   935     00A2  01F6               	clrf	i1SendString@i
   936     00A3  01F7               	clrf	i1SendString@i+1
   937     00A4  28B0               	goto	i1l842
   938     00A5                     i1l838:
   939                           
   940                           ;testuart.c: 63:             SendByteSerially(str[i]);
   941     00A5  0876               	movf	i1SendString@i,w
   942     00A6  0775               	addwf	i1SendString@str,w
   943     00A7  0084               	movwf	4
   944     00A8  2083               	fcall	stringdir
   945     00A9  2112               	fcall	i1_SendByteSerially
   946     00AA                     i1l840:
   947     00AA  3001               	movlw	1
   948     00AB  07F6               	addwf	i1SendString@i,f
   949     00AC  1803               	skipnc
   950     00AD  0AF7               	incf	i1SendString@i+1,f
   951     00AE  3000               	movlw	0
   952     00AF  07F7               	addwf	i1SendString@i+1,f
   953     00B0                     i1l842:
   954     00B0  0875               	movf	i1SendString@str,w
   955     00B1  20F1               	fcall	i1_strlen
   956     00B2  0871               	movf	?i1_strlen+1,w
   957     00B3  0277               	subwf	i1SendString@i+1,w
   958     00B4  1D03               	skipz
   959     00B5  28B8               	goto	u14_25
   960     00B6  0870               	movf	?i1_strlen,w
   961     00B7  0276               	subwf	i1SendString@i,w
   962     00B8                     u14_25:
   963     00B8  1C03               	skipc
   964     00B9  28BB               	goto	u14_21
   965     00BA  28BC               	goto	u14_20
   966     00BB                     u14_21:
   967     00BB  28A5               	goto	i1l838
   968     00BC                     u14_20:
   969     00BC                     i1l63:
   970     00BC  0008               	return
   971     00BD                     __end_ofi1_SendString:
   972                           
   973                           	psect	text7
   974     00F1                     __ptext7:	
   975 ;; *************** function i1_strlen *****************
   976 ;; Defined at:
   977 ;;		line 4 in file "/opt/microchip/xc8/v2.40/pic/sources/c90/common/strlen.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;  s               1    wreg     PTR const unsigned char 
   980 ;;		 -> STR_2(16), STR_1(8), 
   981 ;; Auto vars:     Size  Location     Type
   982 ;;  s               1    3[COMMON] PTR const unsigned char 
   983 ;;		 -> STR_2(16), STR_1(8), 
   984 ;;  cp              1    4[COMMON] PTR const unsigned char 
   985 ;;		 -> STR_2(16), STR_1(8), 
   986 ;; Return value:  Size  Location     Type
   987 ;;                  2    0[COMMON] unsigned int 
   988 ;; Registers used:
   989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   995 ;;      Params:         2       0       0       0
   996 ;;      Locals:         2       0       0       0
   997 ;;      Temps:          1       0       0       0
   998 ;;      Totals:         5       0       0       0
   999 ;;Total ram usage:        5 bytes
  1000 ;; Hardware stack levels used: 2
  1001 ;; This function calls:
  1002 ;;		Nothing
  1003 ;; This function is called by:
  1004 ;;		i1_SendString
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008     00F1                     i1_strlen:	
  1009                           ;psect for function i1_strlen
  1010                           
  1011                           
  1012                           ;incstack = 0
  1013                           ; Regs used in i1_strlen: [wreg-fsr0h+status,2+status,0+pclath]
  1014                           ;i1strlen@s stored from wreg
  1015     00F1  00F3               	movwf	i1strlen@s
  1016     00F2                     i1l794:
  1017     00F2  0873               	movf	i1strlen@s,w
  1018     00F3  00F4               	movwf	i1strlen@cp
  1019     00F4  28F9               	goto	i1l798
  1020     00F5                     i1l796:
  1021     00F5  3001               	movlw	1
  1022     00F6  00F2               	movwf	??i1_strlen
  1023     00F7  0872               	movf	??i1_strlen,w
  1024     00F8  07F4               	addwf	i1strlen@cp,f
  1025     00F9                     i1l798:
  1026     00F9  0874               	movf	i1strlen@cp,w
  1027     00FA  0084               	movwf	4
  1028     00FB  2083               	fcall	stringdir
  1029     00FC  3A00               	xorlw	0
  1030     00FD  1D03               	skipz
  1031     00FE  2900               	goto	u12_21
  1032     00FF  2901               	goto	u12_20
  1033     0100                     u12_21:
  1034     0100  28F5               	goto	i1l796
  1035     0101                     u12_20:
  1036     0101                     i1l800:
  1037     0101  0873               	movf	i1strlen@s,w
  1038     0102  0274               	subwf	i1strlen@cp,w
  1039     0103  00F0               	movwf	?i1_strlen
  1040     0104  01F1               	clrf	?i1_strlen+1
  1041     0105  1BF0               	btfsc	?i1_strlen,7
  1042     0106  03F1               	decf	?i1_strlen+1,f
  1043     0107                     i1l618:
  1044     0107  0008               	return
  1045     0108                     __end_ofi1_strlen:
  1046                           
  1047                           	psect	text8
  1048     0112                     __ptext8:	
  1049 ;; *************** function i1_SendByteSerially *****************
  1050 ;; Defined at:
  1051 ;;		line 50 in file "testuart.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;  Byte            1    wreg     unsigned char 
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;  Byte            1    0[COMMON] unsigned char 
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1065 ;;      Params:         0       0       0       0
  1066 ;;      Locals:         1       0       0       0
  1067 ;;      Temps:          0       0       0       0
  1068 ;;      Totals:         1       0       0       0
  1069 ;;Total ram usage:        1 bytes
  1070 ;; Hardware stack levels used: 1
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_isr
  1075 ;;		i1_SendString
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079     0112                     i1_SendByteSerially:	
  1080                           ;psect for function i1_SendByteSerially
  1081                           
  1082                           
  1083                           ;incstack = 0
  1084                           ; Regs used in i1_SendByteSerially: [wreg]
  1085                           ;i1SendByteSerially@Byte stored from wreg
  1086     0112  00F0               	movwf	i1SendByteSerially@Byte
  1087     0113                     i1l790:
  1088     0113                     i1l54:	
  1089                           ;testuart.c: 50: void SendByteSerially(unsigned char Byte);testuart.c: 51: {;testuart.c:
      +                           52:     while (!TXIF);
  1090                           
  1091     0113  1283               	bcf	3,5	;RP0=0, select bank0
  1092     0114  1303               	bcf	3,6	;RP1=0, select bank0
  1093     0115  1E0C               	btfss	12,4	;volatile
  1094     0116  2918               	goto	u11_21
  1095     0117  2919               	goto	u11_20
  1096     0118                     u11_21:
  1097     0118  2913               	goto	i1l54
  1098     0119                     u11_20:
  1099     0119                     i1l792:
  1100                           
  1101                           ;testuart.c: 53:     TXREG=Byte;
  1102     0119  0870               	movf	i1SendByteSerially@Byte,w
  1103     011A  0099               	movwf	25	;volatile
  1104     011B                     i1l57:
  1105     011B  0008               	return
  1106     011C                     __end_ofi1_SendByteSerially:
  1107     007E                     btemp	set	126	;btemp
  1108     007E                     wtemp0	set	126
  1109                           
  1110                           	psect	idloc
  1111                           
  1112                           ;Config register IDLOC0 @ 0x2000
  1113                           ;	unspecified, using default values
  1114     2000                     	org	8192
  1115     2000  3FFF               	dw	16383
  1116                           
  1117                           ;Config register IDLOC1 @ 0x2001
  1118                           ;	unspecified, using default values
  1119     2001                     	org	8193
  1120     2001  3FFF               	dw	16383
  1121                           
  1122                           ;Config register IDLOC2 @ 0x2002
  1123                           ;	unspecified, using default values
  1124     2002                     	org	8194
  1125     2002  3FFF               	dw	16383
  1126                           
  1127                           ;Config register IDLOC3 @ 0x2003
  1128                           ;	unspecified, using default values
  1129     2003                     	org	8195
  1130     2003  3FFF               	dw	16383
  1131                           
  1132                           	psect	config
  1133                           
  1134                           ;Config register CONFIG @ 0x2007
  1135                           ;	Oscillator Selection bits
  1136                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1137                           ;	Watchdog Timer Enable bit
  1138                           ;	WDTE = OFF, WDT disabled
  1139                           ;	Power-up Timer Enable bit
  1140                           ;	PWRTE = OFF, PWRT disabled
  1141                           ;	RA5/MCLR/VPP Pin Function Select bit
  1142                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  1143                           ;	Brown-out Detect Enable bit
  1144                           ;	BOREN = ON, BOD enabled
  1145                           ;	Low-Voltage Programming Enable bit
  1146                           ;	LVP = ON, RB4/PGM pin has PGM function, low-voltage programming enabled
  1147                           ;	Data EE Memory Code Protection bit
  1148                           ;	CPD = OFF, Data memory code protection off
  1149                           ;	Flash Program Memory Code Protection bit
  1150                           ;	CP = OFF, Code protection off
  1151     2007                     	org	8199
  1152     2007  3FEA               	dw	16362

Data Sizes:
    Strings     24
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     11      11
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_2(CODE[16]), STR_1(CODE[8]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_2(CODE[16]), STR_1(CODE[8]), 

    SendString@str	PTR unsigned char  size(1) Largest target is 16
		 -> STR_2(CODE[16]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_SendString
    i1_SendString->i1_strlen

Critical Paths under _main in BANK0

    _main->_SendString
    _SendString->_strlen

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     323
                                              8 BANK0      3     3      0
                           _InitUART
                   _SendByteSerially
                         _SendString
 ---------------------------------------------------------------------------------
 (1) _SendString                                           3     3      0     301
                                              5 BANK0      3     3      0
                   _SendByteSerially
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               5     3      2     123
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _SendByteSerially                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  4     4      0     224
                                              8 COMMON     4     4      0
                 i1_SendByteSerially
                       i1_SendString
 ---------------------------------------------------------------------------------
 (4) i1_SendString                                         3     3      0     202
                                              5 COMMON     3     3      0
                 i1_SendByteSerially
                           i1_strlen
 ---------------------------------------------------------------------------------
 (6) i1_strlen                                             5     3      2      90
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (5) i1_SendByteSerially                                   1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitUART
   _SendByteSerially
   _SendString
     _SendByteSerially
     _strlen

 _isr (ROOT)
   i1_SendByteSerially
   i1_SendString
     i1_SendByteSerially
     i1_strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      B       B       3       13.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0       0      10        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Dec 22 18:43:46 2023

                         pc 0002                          l51 00D7                          l54 010B  
                        l63 0061                          l57 0111                          u90 010F  
                        u91 010E                          fsr 0004                         l810 00C6  
                       l618 00F0                         l820 00CF                         l812 00C9  
                       l804 00BD                         l822 00D0                         l814 00CA  
                       l806 00C3                         l830 0046                         l824 00D3  
                       l816 00CB                         l808 00C5                         l832 004B  
                       l826 00D6                         l818 00CE                         l834 0053  
                       l780 00DB                         l828 0043                         l860 0015  
                       l782 00DE                         l870 002B                         l862 0018  
                       l776 010B                         l784 00E2                         l872 002D  
                       l864 0019                         l856 0011                         l778 010F  
                       l786 00EA                         l874 002F                         l866 001A  
                       l858 0014                         l868 001C                         _GIE 005F  
                       _RB5 0035                         u100 00EA                         u101 00E9  
                       u130 0061                         u131 0060                         u135 005D  
                       u177 0024                         u187 0037                         _RX9 00C6  
                       _TX9 04C6                         _isr 0062                         fsr0 0004  
                      ?_isr 0070                        STR_1 0099                        STR_2 0089  
                      _BRGH 04C2                        _CREN 00C4                        _PEIE 005E  
                      _RCIE 0465                        _RCIF 0065                        i1l54 0113  
                      i1l70 0078                        i1l63 00BC                        i1l57 011B  
                      _SPEN 00C7                        _TX9D 04C0                        _SREN 00C5  
                      _TXIE 0464                        _TXEN 04C5                        _TXIF 0064  
                      _SYNC 04C4                        _main 0011                        btemp 007E  
                      start 000E                       ??_isr 0078                       ?_main 0070  
                     i1l800 0101                       i1l618 0107                       i1l840 00AA  
                     i1l842 00B0                       i1l850 006F                       i1l836 00A2  
                     i1l852 0071                       i1l844 0062                       i1l790 0113  
                     i1l838 00A5                       i1l854 0075                       i1l846 0068  
                     i1l792 0119                       i1l848 0069                       i1l794 00F2  
                     i1l796 00F5                       i1l798 00F9                       _RCREG 001A  
                     u11_20 0119                       u11_21 0118                       u12_20 0101  
                     u12_21 0100                       u14_20 00BC                       u14_21 00BB  
                     u14_25 00B8                       u15_20 0068                       u15_21 0067  
                     u16_20 006F                       u16_21 006E                       _SPBRG 0099  
                     _TRISB 0086                       _TXREG 0019                       pclath 000A  
                     status 0003                       wtemp0 007E            __end_ofi1_strlen 0108  
           __initialization 000F                __end_of_main 0040            __end_of_InitUART 00D8  
             SendString@str 0027                      ??_main 0028                  i1strlen@cp 0074  
        i1_SendByteSerially 0112                  _SendString 0040                      _TRISB1 0431  
                    _TRISB2 0432         ?i1_SendByteSerially 0070      i1SendByteSerially@Byte 0070  
                    _strlen 00D8        ??i1_SendByteSerially 0070    __end_of_SendByteSerially 0112  
                    saved_w 007E     __end_of__initialization 000F              __pcstackCOMMON 0070  
      SendByteSerially@Byte 0020                 SendString@i 0025             i1SendString@str 0075  
                 ?i1_strlen 0070                 ?_SendString 0070                   ?_InitUART 0070  
                __pmaintext 0011                  __pintentry 0004                     ?_strlen 0020  
                ??i1_strlen 0072                  __stringtab 0083                  ??_InitUART 0020  
                   __ptext1 0040                     __ptext2 00D8                     __ptext3 0108  
                   __ptext4 00BD                     __ptext5 0062                     __ptext6 00A1  
                   __ptext7 00F1                     __ptext8 0112        end_of_initialization 000F  
             ?i1_SendString 0070                     strlen@s 0023           ?_SendByteSerially 0070  
        ??_SendByteSerially 0020              ??i1_SendString 0075              __end_of_strlen 00F1  
       start_initialization 000F                 __end_of_isr 0083                   i1strlen@s 0073  
              ??_SendString 0025                    ??_strlen 0022          __end_of_SendString 0062  
                 ___latbits 0000               __pcstackBANK0 0020                   __pstrings 0083  
      __end_ofi1_SendString 00BD           interrupt_function 0004                 __stringbase 0088  
                  i1_strlen 00F1                    _InitUART 00BD          __end_of__stringtab 0089  
             i1SendString@i 0076  __end_ofi1_SendByteSerially 011C                    intlevel1 0000  
                 stringcode 0083                i1_SendString 00A1                    strlen@cp 0024  
                  stringdir 0083                    stringtab 0083            _SendByteSerially 0108  
